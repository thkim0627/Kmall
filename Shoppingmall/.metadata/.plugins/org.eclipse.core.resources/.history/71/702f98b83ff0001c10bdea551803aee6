<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	
	<!-- <resources> : location에 대한 요청이 Spring MVC에 영향을 받아 직접 접근이 불가능한 경우
                 	   이를 WAS에게 위임하여 url로 resourse에 직접 접근 할 수 있도록 해줌.    
         * : 0 개 이상의 문자와 매칭 
         ** : 0 개 이상의 디렉토리와 화일과 매칭 
         mapping="/resources/**" : /resources/ 의 하위 경로로 접근하는 모든 경로와 파일은
         location="/resources/" : /resources/ 디렉토리 에서 찾아라 ~~~  -->
	<resources mapping="/resources/**" location="/resources/" />
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.ncs.green, service" />
	
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
		 ** Image Upload & Download
		 1) Upload : MultipartResolver 설정 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="-1" />
	</beans:bean>
	<!-- 
		=> id , name 변경 불가능 
			: 대부분의 Resolver로 끝나는 클래스의 경우에는 이미 정해져있기 때문에 변경불가능.
		=> maxUploadSize 는 지정하지 않으면 default 값은 -1 이며 크기 무제한이 됨. 
		   다양하게 변경하며 Test  -->
	
	<!-- *** jsonView 설정 -->
	<beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView" /> 
	<beans:bean id="viewResolver" 
			class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="1" />
	</beans:bean>
	
	<!-- ** Image DownLoad 
	    => 다운로드를 처리할 ViewResolver 클래스 등록  ( Java Code 작성 )
   		=> id="downloadView" 와  컨트롤러의 매핑메서드에서 리턴된 view name 과 같아야 한다. 	-->
	<beans:bean id="downloadView" class="downTest.DownloadView" />
	
<!-- ** BeanNameViewResolver
	=> id 에 해당하는 Bean이 View 를 처리하도록 해주는 ViewResolver 
	   컨트롤러에서  mv.setViewName("downloadView") 하게되면  
	   일반적인 경우 InternalResourceViewResolver 에 의해  views/downloadView.jsp 를 찾음,
	   그러나  jsp 가 아닌 형태의  response 를 처리하는 경우에는 한 이 경우에는 "downloadView" 와
	   동일한  id 로 생성된 Bean 을 찾아 response 를 처리함
	=> 그래서   ViewResolver 들 간의 우선순위가 팔요함 ( 아래  property order 참고 ) 
	=> 사용예 : "jsonView" , ImageDownLoad 의 "downloadView" 

	** property order 
    => 두개이상 존재하는 viewResolver 를 위해서 우선순위를 매기는 것.
            우선순위를 명시 하지 않으면 "가장 낮은 우선순위를 갖게 된다."
            우선순위는 "0"이 가장 먼저 실행되고, 이후로 매겨지는 순서에 따라 실행된다.
    => 그  다음 viewResolver가 실행 기준은 "null" 이 반환되느냐 가 기준이다. 
            그래서 null 값이 있을수 없는 InternalResourceViewResolver 가 우선순위가 높게 되면,
            다른 viewResolver는 사용되지 않기 때문에 (항상 뷰 이름에 매핑되는 뷰 객체를 리턴하기 때문)
      InternalResourceViewResolver 은 우선순위가 가장 낮아야 한다. 
--> 	
	
</beans:beans>